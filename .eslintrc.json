{
	"ignorePatterns": [
		"*.json",
		"*.css"
	],
	"extends": [
		"standard",
		"eslint:recommended",
		"plugin:promise/recommended",
		"plugin:import/recommended",
		"plugin:react/recommended",
		"plugin:jsdoc/recommended",
		"plugin:@typescript-eslint/eslint-recommended",
		"plugin:@typescript-eslint/recommended"
	],
	"parser": "@typescript-eslint/parser",
	"plugins": [
		"@typescript-eslint",
		"jsdoc",
		"eslint-plugin-tsdoc",
		"react-hooks"
	],
	"parserOptions": {
		"ecmaVersion": 2018,
		"project": "./tsconfig.json"
	},
	"rules": {
		"max-len": "off",
		"indent": [
			"error",
			2,
			{
				"SwitchCase": 1,
				"CallExpression": {
					"arguments": "off"
				}
			}
		],
		"semi": [
			"error",
			"always"
		],
		"no-console": "warn",
		"no-void": [
			"error",
			{
				"allowAsStatement": true
			}
		],
		"quotes": [
			"error",
			"double",
			{
				"allowTemplateLiterals": true
			}
		],
		"space-before-function-paren": [
			"error",
			{
				"anonymous": "never",
				"named": "never",
				"asyncArrow": "always"
			}
		],
		"camelcase": "off",
		"curly": [
			"error",
			"multi-or-nest"
		],
		"nonblock-statement-body-position": [
			"error",
			"below"
		],
		"no-unreachable": "warn",
		"no-use-before-define": "off",
		"no-self-compare": "error",
		"no-var": "error",
		"prefer-const": "error",
		"no-unused-vars": "error",
		"@typescript-eslint/no-unused-vars": [
			"error",
			{
				"vars": "all",
				"args": "none",
				"ignoreRestSiblings": false
			}
		],
		"@typescript-eslint/no-use-before-define": "error",
		"@typescript-eslint/no-misused-new": "error",
		"@typescript-eslint/no-floating-promises": "error",
		"@typescript-eslint/no-misused-promises": [
			"error",
			{
				"checksVoidReturn": false
			}
		],
		"@typescript-eslint/no-confusing-void-expression": "error",
		"@typescript-eslint/no-for-in-array": "error",
		"@typescript-eslint/no-unnecessary-type-arguments": "error",
		"@typescript-eslint/no-unsafe-assignment": "warn",
		"@typescript-eslint/no-unsafe-member-access": "error",
		"@typescript-eslint/no-unsafe-return": "error",
		"key-spacing": [
			"error",
			{
				"beforeColon": false,
				"afterColon": true
			}
		],
		"promise/always-return": "off",
		"promise/no-callback-in-promise": "error",
		"promise/no-promise-in-callback": "error",
		"promise/no-nesting": "off",
		"promise/catch-or-return": [
			"error",
			{
				"allowFinally": true,
				"terminationMethod": [
					"catch",
					"finally"
				]
			}
		],
		"import/no-unresolved": "off",
		"@typescript-eslint/camelcase": "off",
		"@typescript-eslint/consistent-type-definitions": [
			"error",
			"interface"
		],
		"@typescript-eslint/no-explicit-any": [
			"error",
			{
				"ignoreRestArgs": true
			}
		],
		"@typescript-eslint/no-empty-function": "off",
		"@typescript-eslint/no-this-alias": "error",
		"@typescript-eslint/type-annotation-spacing": "error",
		"@typescript-eslint/ban-types": [
			"error",
			{
				"types": {
					"String": {
						"message": "Use string instead",
						"fixWith": "string"
					},
					"Boolean": {
						"message": "Use boolean instead",
						"fixWith": "boolean"
					},
					"Number": {
						"message": "Use number instead",
						"fixWith": "number"
					},
					"Object": {
						"message": "Use object instead",
						"fixWith": "object"
					},
					"Symbol": {
						"message": "Use symbol instead",
						"fixWith": "symbol"
					},
					"Function": {
						"message": "The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape."
					}
				},
				"extendDefaults": false
			}
		],
		"@typescript-eslint/naming-convention": [
			"error",
			{
				"selector": "variable",
				"format": [
					"camelCase",
					"snake_case"
				]
			},
			{
				"selector": "parameter",
				"format": [
					"camelCase",
					"snake_case"
				]
			},
			{
				"selector": "class",
				"format": [
					"PascalCase"
				]
			},
			{
				"selector": "method",
				"format": null,
				"custom": {
					"regex": "^[a-z].*",
					"match": true
				}
			},
			{
				"selector": "interface",
				"format": [
					"PascalCase"
				],
				"prefix": [
					"I"
				]
			}
		],
		"tsdoc/syntax": "warn",
		"jsdoc/check-indentation": 1,
		"jsdoc/check-syntax": 1,
		"jsdoc/no-types": 1,
		"jsdoc/require-description": 1,
		"jsdoc/require-param-type": 0,
		"jsdoc/require-returns-type": 0,
		"jsdoc/require-jsdoc": [
			1,
			{
				"require": {
					"ArrowFunctionExpression": false,
					"ClassDeclaration": true,
					"ClassExpression": true,
					"FunctionDeclaration": true,
					"FunctionExpression": true,
					"MethodDefinition": true
				}
			}
		],
		"react-hooks/rules-of-hooks": "error",
		"react-hooks/exhaustive-deps": "warn"
	},
	"overrides": [
		{
			"files": [
				"*.ts",
				"*.tsx"
			],
			"rules": {
				"@typescript-eslint/explicit-member-accessibility": [
					"error"
				]
			}
		},
		{
			"files": [
				"*.js",
				"*.jsx"
			],
			"rules": {
				"@typescript-eslint/class-name-casing": "off",
				"@typescript-eslint/no-empty-function": "off",
				"@typescript-eslint/interface-name-prefix": "off",
				"@typescript-eslint/camelcase": "off",
				"@typescript-eslint/no-var-requires": "off",
				"@typescript-eslint/explicit-function-return-type": "off",
				"@typescript-eslint/explicit-member-accessibility": "off"
			}
		}
	],
	"settings": {
		"react": {
			"version": "detect"
		}
	}
}
// module.exports = {
//     .eslintrc.json
//     'env': {
//         'browser': true,
//         'es6': true
//     },
//     'extends': [
//         'eslint:recommended',
//         'plugin:react/recommended',
//         'plugin:@typescript-eslint/eslint-recommended'
//     ],
//     'globals': {
//         'Atomics': 'readonly',
//         'SharedArrayBuffer': 'readonly'
//     },
//     'parser': '@typescript-eslint/parser',
//     'parserOptions': {
//         'ecmaFeatures': {
//             'jsx': true
//         },
//         'ecmaVersion': 2018,
//         'sourceType': 'module'
//     },
//     'plugins': [
//         'react',
//         '@typescript-eslint'
//     ],
//     'rules': {
//         "no-unused-vars": "off",
//         "@typescript-eslint/no-unused-vars": "error",
//         'indent': [
//             'error',
//             4
//         ],
//         'linebreak-style': [
//             'error',
//             'unix'
//         ],
//         'quotes': [
//             'error',
//             'single'
//         ],
//         'semi': [
//             'error',
//             'always'
//         ]
//     }
// };